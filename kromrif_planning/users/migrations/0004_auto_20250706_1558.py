# Generated by Django 5.1.11 on 2025-07-06 15:58

from django.db import migrations
from django.contrib.auth.models import Group


def create_role_groups(apps, schema_editor):
    """Create Django Groups for each role."""
    # Define role groups to create
    role_groups = [
        'Developer',
        'Officer', 
        'Recruiter',
        'Member',
        'Applicant',
        'Guest',
    ]
    
    # Create groups if they don't exist
    for group_name in role_groups:
        Group.objects.get_or_create(name=group_name)


def assign_existing_users_to_groups(apps, schema_editor):
    """Assign existing users to appropriate Django Groups based on role_group field."""
    User = apps.get_model('users', 'User')
    
    # Role mapping from field value to group name
    role_mapping = {
        'developer': 'Developer',
        'officer': 'Officer',
        'recruiter': 'Recruiter',
        'member': 'Member',
        'applicant': 'Applicant',
        'guest': 'Guest',
    }
    
    # Process all users
    for user in User.objects.all():
        if user.role_group and user.role_group in role_mapping:
            # Get the corresponding group
            group_name = role_mapping[user.role_group]
            try:
                group = Group.objects.get(name=group_name)
                # Add user to group if not already a member
                if not user.groups.filter(name=group_name).exists():
                    user.groups.add(group)
            except Group.DoesNotExist:
                # Group should exist from previous operation, but handle gracefully
                pass


def reverse_role_groups(apps, schema_editor):
    """Remove role groups when reversing migration."""
    role_groups = [
        'Developer',
        'Officer',
        'Recruiter', 
        'Member',
        'Applicant',
        'Guest',
    ]
    
    # Remove groups (this will also remove users from groups)
    for group_name in role_groups:
        try:
            group = Group.objects.get(name=group_name)
            group.delete()
        except Group.DoesNotExist:
            pass


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0003_alter_user_options_alter_user_managers_and_more'),
    ]

    operations = [
        migrations.RunPython(
            create_role_groups,
            reverse_role_groups,
        ),
        migrations.RunPython(
            assign_existing_users_to_groups,
            migrations.RunPython.noop,
        ),
    ]
