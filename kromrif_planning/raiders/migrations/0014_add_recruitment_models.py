# Generated by Django 5.1.11 on 2025-07-14 15:17

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('raiders', '0013_memberattendancesummary'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applicant_name', models.CharField(help_text='Real name or preferred name of the applicant', max_length=100)),
                ('applicant_email', models.EmailField(help_text='Email address for contact', max_length=254)),
                ('discord_username', models.CharField(help_text='Discord username for communication', max_length=100)),
                ('character_name', models.CharField(help_text='Primary character name for the application', max_length=64, validators=[django.core.validators.MinLengthValidator(2)])),
                ('character_class', models.CharField(help_text='Character class (e.g., Warrior, Cleric, Wizard)', max_length=32)),
                ('character_level', models.PositiveIntegerField(help_text='Current character level')),
                ('character_spec', models.CharField(blank=True, help_text='Character specialization or build (optional)', max_length=100)),
                ('guild_experience', models.TextField(help_text='Previous guild experience and EverQuest history')),
                ('raid_experience', models.TextField(help_text='Raid experience and knowledge of current content')),
                ('play_schedule', models.TextField(help_text='Available play times and raid schedule compatibility')),
                ('motivation', models.TextField(help_text='Why they want to join the guild')),
                ('references', models.TextField(blank=True, help_text='References from current or former guild members (optional)')),
                ('additional_info', models.TextField(blank=True, help_text='Any additional information the applicant wants to share')),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('under_review', 'Under Review'), ('officer_approved', 'Officer Approved'), ('voting_open', 'Voting Open'), ('voting_closed', 'Voting Closed'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn'), ('expired', 'Expired')], default='submitted', help_text='Current status of the application', max_length=20)),
                ('submitted_at', models.DateTimeField(auto_now_add=True, help_text='When the application was submitted')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When the application was first reviewed by officers', null=True)),
                ('voting_opened_at', models.DateTimeField(blank=True, help_text='When member voting was opened', null=True)),
                ('voting_deadline', models.DateTimeField(blank=True, help_text='Deadline for voting (typically 48 hours after opening)', null=True)),
                ('decision_made_at', models.DateTimeField(blank=True, help_text='When the final decision was made', null=True)),
                ('officer_notes', models.TextField(blank=True, help_text='Internal notes from officers (not visible to applicant)')),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection (shared with applicant)')),
                ('discord_message_id', models.CharField(blank=True, help_text='Discord message ID for application summary', max_length=100)),
                ('discord_thread_id', models.CharField(blank=True, help_text='Discord thread ID for discussion', max_length=100)),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the application was last updated')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which application was submitted', null=True)),
                ('approved_user', models.OneToOneField(blank=True, help_text='User account created after approval', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='application', to=settings.AUTH_USER_MODEL)),
                ('decision_made_by', models.ForeignKey(blank=True, help_text='Officer who made the final decision', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applications_decided', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Officer who reviewed the application', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applications_reviewed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Guild Application',
                'verbose_name_plural': 'Guild Applications',
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='ApplicationVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.CharField(choices=[('yes', 'Yes - Approve'), ('no', 'No - Reject'), ('abstain', 'Abstain')], help_text='The vote choice', max_length=10)),
                ('vote_weight', models.DecimalField(decimal_places=1, default=Decimal('1.0'), help_text='Weight of this vote based on attendance', max_digits=3)),
                ('reasoning', models.TextField(blank=True, help_text='Optional reasoning for the vote (visible to officers)')),
                ('attendance_rate_30d', models.DecimalField(decimal_places=2, help_text="Voter's 30-day attendance rate at time of vote", max_digits=5)),
                ('was_voting_eligible', models.BooleanField(default=True, help_text='Whether voter was eligible at time of vote')),
                ('voted_at', models.DateTimeField(auto_now_add=True, help_text='When the vote was cast')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the vote was last updated')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which vote was cast', null=True)),
                ('application', models.ForeignKey(help_text='The application being voted on', on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='raiders.application')),
                ('voter', models.ForeignKey(help_text='The user casting the vote', on_delete=django.db.models.deletion.CASCADE, related_name='application_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Application Vote',
                'verbose_name_plural': 'Application Votes',
                'ordering': ['-voted_at'],
            },
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['status', '-submitted_at'], name='raiders_app_status_c66f39_idx'),
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['character_name'], name='raiders_app_charact_0e2423_idx'),
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['applicant_email'], name='raiders_app_applica_8d56c4_idx'),
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['discord_username'], name='raiders_app_discord_a078c0_idx'),
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['voting_deadline'], name='raiders_app_voting__7b22b2_idx'),
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['reviewed_by', '-submitted_at'], name='raiders_app_reviewe_4ba3b3_idx'),
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['-submitted_at'], name='raiders_app_submitt_fb6b51_idx'),
        ),
        migrations.AddIndex(
            model_name='applicationvote',
            index=models.Index(fields=['application', 'vote'], name='raiders_app_applica_eb6178_idx'),
        ),
        migrations.AddIndex(
            model_name='applicationvote',
            index=models.Index(fields=['voter', '-voted_at'], name='raiders_app_voter_i_95694d_idx'),
        ),
        migrations.AddIndex(
            model_name='applicationvote',
            index=models.Index(fields=['vote', 'vote_weight'], name='raiders_app_vote_295b81_idx'),
        ),
        migrations.AddIndex(
            model_name='applicationvote',
            index=models.Index(fields=['-voted_at'], name='raiders_app_voted_a_e73bf4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='applicationvote',
            unique_together={('application', 'voter')},
        ),
    ]
